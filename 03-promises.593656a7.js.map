{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAGgBC,SAASC,cAAc,SAArB,MACZC,EAAWF,SAASC,cAAc,kBAClCE,EAAUH,SAASC,cAAc,iBACjCG,EAAYJ,SAASC,cAAc,mBAQnB,SAAbI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EAEFI,EAAQ,C,SAAEN,E,MAAUC,IAGpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAnBEP,SAASC,cAAc,UAE/Bc,iBAAiB,SAsB0G,SAA5GC,GACpBA,EAAMC,iBAEN,IAAIC,EAAQC,OAAOjB,EAASkB,OACxBC,EAAOF,OAAOhB,EAAQiB,OACtBE,EAASH,OAAOf,EAAUgB,OAE9B,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAAG,CAEnClB,EAAckB,EADKL,EAAQG,EAAOE,GAE/BC,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBkB,EAAA3B,GAAS4B,OAAOC,QACd,uBAAqBrB,QAAiBC,MAAU,IAGnDqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBkB,EAAA3B,GAAS4B,OAAOG,QACd,sBAAoBvB,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["// підключення та імпорт бібліотек\nimport Notiflix from 'notiflix';\n\n// отриммуємо елементи\nconst formRef = document.querySelector('.form');\nconst delayRef = document.querySelector('[name=\"delay\"]');\nconst stepRef = document.querySelector('[name=\"step\"]');\nconst amountRef = document.querySelector('[name=\"amount\"]');\nconst btnRef = document.querySelector('button');\n\nbtnRef.addEventListener('click', onFormSubmit);\n\n//function createPromise(position, delay) повинна повертати проміс, тобто return new Promise. Усередині промісу має бути setTimeout з часом delay\n// Fulfill - проміс, який виконується\n// Reject - проміс, який відхиляється\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// запускаємо цикл (Лічильник починаємо з 1, цикл виконується поки i менше або дорівнює значенню з поля amount).І всередині циклу запускаємо функцію створення промісів\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  let delay = Number(delayRef.value);\n  let step = Number(stepRef.value);\n  let amount = Number(amountRef.value);\n\n  for (let i = 0; i <= amount; i += 1) {\n    let promiseDelay = delay + step * i;\n    createPromise(i, promiseDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n"],"names":["$7Y9D8","parcelRequire","document","querySelector","$47d4ff9957288465$var$delayRef","$47d4ff9957288465$var$stepRef","$47d4ff9957288465$var$amountRef","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","step","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.593656a7.js.map"}